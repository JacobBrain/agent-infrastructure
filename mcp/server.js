#!/usr/bin/env node
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";

const server = new Server(
  {
    name: "jacob-agents",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Define Nova tool
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "nova_write",
        description: "Generate LinkedIn or Substack content using Nova, Jacob's marketing writer. Analyzes voice examples from Notion and produces drafts in Jacob's style.",
        inputSchema: {
          type: "object",
          properties: {
            topic: {
              type: "string",
              description: "What to write about",
            },
            platform: {
              type: "string",
              enum: ["LinkedIn", "Substack"],
              description: "Platform to write for",
            },
            style: {
              type: "string",
              description: "Optional style notes (e.g., 'more casual' or 'use a story')",
            },
          },
          required: ["topic", "platform"],
        },
      },
    ],
  };
});

// Handle tool calls
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  if (request.params.name === "nova_write") {
    const { topic, platform, style } = request.params.arguments;

    try {
      const response = await fetch("https://marketing-writer.jacob-788.workers.dev", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          topic,
          platform,
          style: style || "",
        }),
      });

      const data = await response.json();

      if (data.success) {
        return {
          content: [
            {
              type: "text",
              text: `Draft generated by Nova:\n\n${data.draft}\n\n(Used ${data.voiceExamplesUsed} voice examples, ${data.contextDocsUsed} context docs)`,
            },
          ],
        };
      } else {
        return {
          content: [
            {
              type: "text",
              text: `Error: ${data.error}`,
            },
          ],
          isError: true,
        };
      }
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `Error calling Nova: ${error.message}`,
          },
        ],
        isError: true,
      };
    }
  }

  throw new Error(`Unknown tool: ${request.params.name}`);
});

async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("Jacob's Agents MCP server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error:", error);
  process.exit(1);
});